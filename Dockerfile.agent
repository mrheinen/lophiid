# Multi-stage build for Lophiid Agent
FROM golang:1.23-bullseye AS builder

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    protobuf-compiler \
    protoc-gen-go \
    libmagic-dev \
    libssl-dev \
    pkg-config \
    unzip \
    && rm -rf /var/lib/apt/lists/*

# Install compatible gRPC plugin version
RUN go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2.0

# Install specific Bazel version (7.4.1 from .bazelversion) - architecture aware
RUN ARCH=$(uname -m) && \
    if [ "$ARCH" = "x86_64" ]; then BAZEL_ARCH="x86_64"; \
    elif [ "$ARCH" = "aarch64" ]; then BAZEL_ARCH="arm64"; \
    else echo "Unsupported architecture: $ARCH" && exit 1; fi && \
    curl -LO "https://github.com/bazelbuild/bazel/releases/download/7.4.1/bazel-7.4.1-linux-${BAZEL_ARCH}" \
    && chmod +x bazel-7.4.1-linux-${BAZEL_ARCH} \
    && mv bazel-7.4.1-linux-${BAZEL_ARCH} /usr/local/bin/bazel

# Set up workspace
WORKDIR /workspace
COPY . .

# Compile protobuf files
RUN ./compile_proto.sh

# Build agent
RUN bazel build //cmd/agent:client

# Runtime stage
FROM debian:bullseye-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libmagic1 \
    iputils-ping \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create directories with proper permissions for user namespace mapping
# Note: /var/empty/lophiid is for privilege dropping at runtime
RUN mkdir -p -m 755 /var/empty/lophiid && \
    mkdir -p /app/config /app/certs /app/logs && \
    chmod 755 /app && \
    chmod 777 /app/logs && \
    chmod 755 /var/empty/lophiid

# Copy binary (correct Bazel output path)
COPY --from=builder /workspace/bazel-bin/cmd/agent/client_/client /app/agent
RUN chmod +x /app/agent

# Note: USER will be set via docker-compose user: directive for namespace mapping

# Set ICMP ping permissions
RUN sysctl -w net.ipv4.ping_group_range="0 2147483647" || echo "ICMP ping setup will be needed at runtime"

# For privileged port binding, run as root
# USER lophiid-agent
WORKDIR /app

# Expose HTTP port (configurable)
EXPOSE 8000

# Health check - test if HTTP server is responding (any HTTP response is good)
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/ | grep -E "^[1-5][0-9][0-9]$" >/dev/null || exit 1

CMD ["./agent"]