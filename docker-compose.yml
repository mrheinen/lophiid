services:
  postgres:
    image: postgres:15
    env_file:
      - .env.backend
    environment:
      POSTGRES_DB: lophiid
      POSTGRES_USER: lophiid
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/database.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lophiid"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env.backend
    user: "${DOCKER_UID:-1000}:${DOCKER_GID:-1000}"
    volumes:
      - ./certs:/app/certs:ro
      - ./data/malware:/app/malware
      - ./data/logs/backend:/app/logs
    ports:
      - "8080:8080"
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env.backend
    user: "${DOCKER_UID:-1000}:${DOCKER_GID:-1000}"
    volumes:
      - ./data/logs/api:/app/logs
    ports:
      - "9999:9999"
    restart: unless-stopped

  ui:
    build:
      context: .
      dockerfile: Dockerfile.ui
    env_file:
      - .env.backend
    depends_on:
      - api
    ports:
      - "9888:9888"
    restart: unless-stopped

  # Optional: Triage service for AI analysis
  triage:
    build:
      context: .
      dockerfile: Dockerfile.triage
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env.backend
    user: "${DOCKER_UID:-1000}:${DOCKER_GID:-1000}"
    volumes:
      - ./data/logs/triage:/app/logs
    restart: unless-stopped
    profiles:
      - full

volumes:
  postgres_data:

networks:
  default:
    name: lophiid-backend-network
    driver: bridge
    # Backend infrastructure network
    # Remote agents connect via published port 8080